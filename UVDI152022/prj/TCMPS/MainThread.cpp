
/*
 desc : Main Thread
*/

#include "pch.h"
#include "MainApp.h"
#include "MainThread.h"
/* ??? ??? */
#include "./work/WorkExpoOnly.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


/*
 desc : ??????
 parm : parent	- [in]  ????? ????? ?¥è? ???? ???
 retn : None
*/
CMainThread::CMainThread(HWND parent)
	: CThinThread()
{
	m_bRunWork	= FALSE;
	m_hParent	= parent;
	m_pWorkJob	= NULL;
	m_pExpoOnly	= NULL;
	/* ????????? ?????? ??? ?©£? ??? ???? */
	m_u64PeridPktTime	= GetTickCount64();
	m_bReqPeriodMC2		= FALSE;
}

/*
 desc : ?©¥???
 parm : None
*/
CMainThread::~CMainThread()
{
	RemoveWorkJob();
}

/*
 desc : ?????? ?????? ??? ??? ????
 parm : None
 retn : DI_TRUE or DI_FALSE
*/
BOOL CMainThread::StartWork()
{
	/* ?????? 1 ?? ???? ???? ????????? ?? */
	CThinThread::Sleep(1000);

	return TRUE;
}

/*
 desc : ?????? ?????? ????????? ????
 parm : None
 retn : None
*/
VOID CMainThread::RunWork()
{
	/* ???? ???? */
	if (m_syncCali.Enter())
	{
		/* ??????? ?????? ??? */
		SendMesgParent(MSG_WORK_PERIOD, 100);
#if 1
		/* ??? ???? ???¥ï? ???? */
		if (m_bRunWork)	RunWorkJob();
#if (USE_LUIRA_REQ_PERIOD_PKT)
		else			PauseWorkJob();
#else
		else			ReqPeriodPkt();
#endif
#endif
		/* ???? ???? */
		m_syncCali.Leave();
	}
}

/*
 desc : ?????? ?????? ?????????? ??? ????
 parm : None
 retn : None
*/
VOID CMainThread::EndWork()
{
}
#if 1
/*
 desc : ??? ???? ????
 parm : None
 retn : None
*/
VOID CMainThread::StartWorkJob()
{
	/* ???? ???? */
	if (m_syncCali.Enter())
	{
		m_bRunWork	= TRUE;
		/* ???? ???? */
		m_syncCali.Leave();
	}
}

/*
 desc : ??? ???? (????? ????? ?????? ????)
 parm : None
 retn : None
*/
VOID CMainThread::RunWorkJob()
{
	if (!m_pWorkJob)	return;

	if (m_pWorkJob->IsCompleted() || m_pWorkJob->IsWorkError())
	{
		if (m_pWorkJob->IsCompleted())		SendMesgParent(MSG_WORK_COMPLETED);
		else if (m_pWorkJob->IsWorkError())	SendMesgParent(MSG_WORK_ERROR);
		m_bRunWork	= FALSE;
		return;
	}
	/* ???? ??? ???? */
	m_pWorkJob->RunWork();
}
#if (USE_LUIRA_REQ_PERIOD_PKT)
/*
 desc : ??? ???? ?? ????? ???
 parm : None
 retn : None
*/
VOID CMainThread::PauseWorkJob()
{
	/* Luria?? ????????? PH?? ???? ???? ???????? ??? */
	if (!uvEng_Luria_IsSendPeriodPkt())	uvEng_Luria_SendPeriodPkt(TRUE);
}
#endif
/*
 desc : ??? ???? ????
 parm : None
 retn : None
*/
VOID CMainThread::StopWorkJob()
{
	/* ???? ???? */
	if (m_syncCali.Enter())
	{
		m_bRunWork	= FALSE;
		/* ???? ???? */
		m_syncCali.Leave();
	}
}
#endif
/*
 desc : ?¥è?? ????? ???? (SendMessage)
 parm : msg_id	- [in]  ????? ID (0, 1, 2, 4)
		timeout	- [in]  SendMessag Lifetime (unit: msec)
 retn : None
*/
VOID CMainThread::SendMesgParent(UINT16 msg_id, UINT32 timeout)
{
	DWORD_PTR dwResult	= 0;
	LRESULT lResult		= 0;

	/* ?¥è?? ???? ????? ???? */
	lResult	= ::SendMessageTimeout(m_hParent, WM_MAIN_THREAD, msg_id, 0L,
								   SMTO_NORMAL, timeout, &dwResult);
	if (0 == lResult)
	{
#if 0
		/* ???? ????? ???? ?? ???? */
		TRACE("MainThread : SendMessage Time out <Normal> = %d \n", GetLastError());
#endif
	}
}
/*
 desc : ???? ???? Work Job?? ID ??? ?? ???
 parm : None
 retn : ENG_BWOK ?? ???
*/
ENG_BWOK CMainThread::GetWorkJobID()
{
	if (!m_pWorkJob)	return ENG_BWOK::en_work_none;
	return m_pWorkJob->GetWorkJobID();
}

/*
 desc : ???? ??? ????? ???
 parm : None
 retn : ??? ????? (????: percentage)
*/
DOUBLE CMainThread::GetWorkRate()
{
	if (!m_bRunWork || !m_pWorkJob)	return 0.0f;
	return m_pWorkJob->GetWorkRate();
}

/*
 desc : ???? ???? ?????? ????? Job Name ???
 parm : None
 retn : Job Name (Work Step & Total ????)
*/
PTCHAR CMainThread::GetErrorJobName()
{
	if (!m_pWorkJob)	return NULL;
	return m_pWorkJob->GetLastWorkJobName();
}

/*
 desc : ???? ???? ???? ??? ??? ????
 parm : None
 retn : None
*/
VOID CMainThread::RemoveWorkJob()
{
	if (!m_pWorkJob)	return;
	if (m_pExpoOnly)	delete m_pExpoOnly;	m_pExpoOnly = NULL;
}

/*
 desc : ??? - Only Expose
 parm : None
 retn : TRUE or FALSE
*/
BOOL CMainThread::SetWorkExpoOnly()
{
	if (IsRunWork())	return FALSE;
	/* ???? ??? ??? ???? */
	RemoveWorkJob();

	/* ??? ??? ??? ???? */
	m_pExpoOnly	= new CWorkExpoOnly();
	ASSERT(m_pExpoOnly);
	m_pExpoOnly->InitWork();
	/* ???? ?????? ??? ??? ??? ???? */
	m_pWorkJob	= m_pExpoOnly;
	/* ??? ??? */
	m_pWorkJob->SetAlignMode(ENG_AOEM::en_direct_expose);
	/* ??? ???? ???? */
	StartWorkJob();

	return TRUE;
}

#if (!USE_LUIRA_REQ_PERIOD_PKT)
/*
 desc : ????????? ????? ???? ???
 parm : None
 retn : None
*/
VOID CMainThread::ReqPeriodPkt()
{
	UINT64 u64Tick	= GetTickCount64();

	/* ???? ????? ???????? ??? ???? (1??? n?? ??????? ?????? ????) */
	if (u64Tick < m_u64PeridPktTime + 1000/4)	return;

	/* ???? ???? ????? ?©£? ???? */
	m_u64PeridPktTime	= u64Tick;
#if 0
	/* Motion Position ??? */
	if (m_bReqPeriodMC2)	uvEng_MC2_ReadReqPktActAll();
	else					uvEng_MC2_ReadReqPktRefAll();
	m_bReqPeriodMC2	= !m_bReqPeriodMC2;
#endif
	/* Luria State ??? */
	uvEng_Luria_ReqGetMotorAbsPositionAll();
}
#endif